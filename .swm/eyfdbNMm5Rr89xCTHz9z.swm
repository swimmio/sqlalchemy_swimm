{
    "id": "eyfdbNMm5Rr89xCTHz9z",
    "name": "Constrained Table Flipper ORM",
    "task": {
        "dod": "Make the tests pass.",
        "tests": [
            "python -m pytest tests/test_create_tables.py"
        ],
        "hints": [
            "Take a look at `CheckConstraint` and `UniqueConstraint` in order to satisfy the failing tests."
        ]
    },
    "content": [
        {
            "type": "text",
            "text": "Remember \"Table Flipper ORM\"? Well, something about it just felt a bit... off. You know that some things just don't make a lot of sense, so why not save ourselves a few `if` statements in our Python code and let the DB do the work for us?\n\nIn this unit we'll learn about adding `constraints` to our database.\n\nRecommended References\n----------------------\n\n*   [https://docs.sqlalchemy.org/en/13/core/constraints.html](https://docs.sqlalchemy.org/en/13/core/constraints.html)"
        },
        {
            "type": "snippet",
            "path": "utils/people/orm_constraints.py",
            "comments": [],
            "firstLineNumber": 1,
            "lines": [
                " import sqlalchemy as db",
                "*from sqlalchemy.ext.declarative import declarative_base",
                "*from sqlalchemy.sql.schema import CheckConstraint, UniqueConstraint",
                " ",
                " BaseCons = declarative_base()",
                " ",
                " ",
                " class UsersCons(BaseCons):",
                "*    __tablename__ = 'users'",
                "+    pass",
                "*    __table_args__ = (",
                "*        CheckConstraint('last_name == \"Simpson\"', name='simpson_clause'),",
                "*        UniqueConstraint('first_name', 'last_name', name='unique_name_clause'),",
                "*    )",
                "*    id = db.Column(db.Integer, primary_key=True, autoincrement=True)",
                "*    first_name = db.Column(db.String, nullable=False)",
                "*    last_name = db.Column(db.String, nullable=False)",
                " ",
                " ",
                " class HobbiesCons(BaseCons):",
                "*    __tablename__ = 'hobbies'",
                "+    pass",
                "*    id = db.Column(db.Integer, primary_key=True, autoincrement=True)",
                "*    hobby = db.Column(db.String, nullable=False, index=True)",
                "*    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))"
            ]
        },
        {
            "type": "text",
            "text": "Using `constraints` allows us to delegate some of our work directly to the database itself.\n\nNotice how there's more than one way to define some of our constraints: either as a paramater passed directly to the `Column` object (this works with SQLAlchemy Core too) or using the `__table_args__` attribute. Some can even be inlined as a parameter to the `Column` object (such as the `unique=True` or `index=True` parameters)."
        }
    ],
    "symbols": {},
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.4-0",
        "file_blobs": {
            "utils/people/orm_constraints.py": "8a6949c55e94b931e1607b02846f87a77121f66c"
        }
    }
}
