{
    "id": "L1GG2Efzgz2WgTORQzxB",
    "name": "The ABC Game",
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.4-0",
        "file_blobs": {
            "src/first_letter_artists_count.py": "a62c976d8b79a13d058955762354ef762d1e6695"
        }
    },
    "content": [
        {
            "type": "text",
            "text": "Good news! The `Alphabetical` corporation wants to sponsor `Rock Em' Socks!` !\n\nThere's a big promotion sale happening and they want in, but they have one condition: they want on the poster only the artists who's name first letter is the most common out there. Alphabets!\n\nHelp arrange `Rock Em' Socks` unlikely sponsor's wishes.\n\nIn this unit we'll learn about using SQL functions and chaining multiple directives to our query.\n\n## Recommended References\n* https://docs.sqlalchemy.org/en/13/orm/query.html\n* https://www.sqltutorial.org/sql-having/"
        },
        {
            "type": "snippet",
            "path": "src/first_letter_artists_count.py",
            "comments": [],
            "firstLineNumber": 2,
            "lines": [
                " ",
                " import sqlalchemy as db",
                " from sqlalchemy.orm import sessionmaker",
                "*from sqlalchemy.sql import func",
                " from utils import rockemsocks",
                " ",
                " engine = db.create_engine(rockemsocks.ROCKEMSOCKSDB_CONNECTION_STRING)"
            ]
        },
        {
            "type": "snippet",
            "path": "src/first_letter_artists_count.py",
            "comments": [],
            "firstLineNumber": 17,
            "lines": [
                "     The pairings are returned in a descending order according to the number of artists (most first, least last).",
                "     Only pairings with a number of artists greater than 10 should be included in the returned list.",
                "     \"\"\"",
                "*    session = Session()",
                "+    pass",
                "*    first_letter_col = func.substr(rockemsocks.Artists.Name, 1, 1).label('artist_first_letter')",
                "*    count_artists_col = func.count(rockemsocks.Artists.ArtistId).label('count_artists')",
                "*    return (",
                "*        session.query(first_letter_col, count_artists_col)",
                "*        .group_by('artist_first_letter')",
                "*        .having(count_artists_col > 10)",
                "*        .order_by(db.desc('count_artists'))",
                "*        .all()",
                "*    )"
            ]
        },
        {
            "type": "text",
            "text": "In this unit we've covered a lot:\n* Grouping data using `group_by`.\n* Ordering data using `order_by` in combination with `desc` and `asc`.\n* When to use `filter` and when to use `having`.\n\nMost basic Query APIs have been covered here, so we're almost 100% ORM experts now!"
        }
    ],
    "task": {
        "dod": "Make the tests pass.",
        "hints": [
            "There's an SQL function that can return a part of a string. Read about SQL's `SUBSTR` function.",
            "Search for the right SQL directives in the docs. You're probably looking for `GROUP BY` or `ORDER BY` and their likes.",
            "Most SQL directives can just be chained one after the other before the \"return functions\" as subsequent query methods.",
            "We can't use `filter` after `group_by`. Read about SQL's `HAVING` directive."
        ],
        "tests": [
            "python -m pytest tests/test_first_letter_artists_count.py"
        ]
    }
}
