{
    "id": "vKqx807OsduhdJkP19zz",
    "name": "Joint Effort",
    "dod": "Make the tests pass.",
    "description": "Now that you know how to select from certain tables, it's time to _really_ impress the Big Boss!\n\nIn this unit you'll need to write a function that takes an artist's name and returns how many tracks are officialy his.\n\nDo not be tempted to use Python's `len` function, instead find some SQL function that can help you.\n\n# Recommended References\n* https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_core_using_joins.htm\n* https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_core_using_functions.htm",
    "summary": "In this unit we've learned the final basic steps that will allow us to seamlessly translate SQL queries to a chain of Pythonic functions. Of course there's always more to learn but with mastery over both `join`s and aggregator functions, there's little that can't be done.\n\nBut, your job isn't done yet! Big Boss needs a few more things from an SQLAlchemy master such as yourself. Get ready to unlock the real power of an ORM...",
    "tests": [
        "python -m pytest tests/test_count_artists_tracks.py"
    ],
    "hints": [
        "Do note that the \"composer\" field in the \"tracks\" DB is unreliable. For example: for certain bands it writes the band name and for others it writes the individual band members.",
        "Given how the \"composer\" field is unreliable, perhaps think of what info can you cross reference between the different tables?",
        "The \"artists\", \"albums\" and \"tracks\" tables should all be used together. How can you join together their info?"
    ],
    "swimmPatch": {
        "src/count_artist_tracks.py": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/src/count_artist_tracks.py b/src/count_artist_tracks.py\nindex b0c2fc5..4497a29 100644\n--- a/src/count_artist_tracks.py\n+++ b/src/count_artist_tracks.py",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -1,7 +1,3 @@",
                        "-import sqlalchemy as db",
                        "-from sqlalchemy.sql import func",
                        "-",
                        "-",
                        " def count_artist_tracks(artist_name: str) -> int:",
                        "     \"\"\"",
                        "     Return how many tracks does a certain artist has in the database."
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -11,17 +7,4 @@",
                        "     :return: number of tracks the artist has.",
                        "     :rtype: int",
                        "     \"\"\"",
                        "-    engine = db.create_engine('sqlite:///databases/rockemsocks.db')",
                        "+    pass",
                        "-    meta = db.MetaData()",
                        "-    meta.reflect(bind=engine)",
                        "-    tracks = meta.tables['tracks']",
                        "-    albums = meta.tables['albums']",
                        "-    artists = meta.tables['artists']",
                        "-",
                        "-    with engine.connect() as connection:",
                        "-        clause = artists.c.Name == artist_name",
                        "-        joined_tables = tracks.join(albums).join(artists)",
                        "-        query = db.select([func.count(tracks.c.TrackId).label('count')]).select_from(joined_tables).where(clause)",
                        "-        results = connection.execute(query).fetchall()",
                        "-",
                        "-    return results[0].count"
                    ]
                }
            ]
        }
    },
    "app_version": "0.2.2",
    "file_version": "1.0.3"
}